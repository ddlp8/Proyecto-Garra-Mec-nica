//Proyecto2 Digital 2 - Immplementación de Servos 

#include <Servo.h> //Llamar a la librería Servho.h para poder utilizarla dentro del código
Servo motor1; //Servo1 de la base 
Servo motor2; //Servo2 
Servo motor3; //Servo3 
Servo motor4; //Servo4

//Para modo manual
//Establecer una variable para el valor de cada potenciómetro
int Pot1 = 4; 
int Pot2 = 5;
int Pot3 = 6; 
int Pot4 = 7; 

//Para cambio de modo
int cambio = 10; //Establecer una variable con el switch para el cambio de modo 
int contador = 0;  //Declarar la variable de contador empezando en 0

//Para modo automático 
//Establecer las variables de los botones para adelantar o retroceder de posición en modo automático 
int boton1 = 2; //Boton para adelantar
int boton2 = 4; //Boton para retroceder

bool palanca;

//Pines para los LEDs de modo
const int led_azul_auto = 11;    // LED azul - modo automático
const int led_amarillo_manual = 12; // LED amarillo - modo manual

//Prototipos de las funciones que se van a utlizar 
void AnguloMotores(int m1, int m2, int m3, int m4); //Prototipo para la función de mover cada servomotor
void ModoManual(); //Prototipo para la función del modo manual
void ModoAutomatico(); //Prototipo para la función del modo automático

void setup() {
  //Establecer a los pines a los que está conectado el motor
  motor1.attach(3); 
  motor2.attach(5);
  motor3.attach(6);
  motor4.attach(9);

  //Switch para cambiar entre estados
  pinMode(cambio, INPUT); //Declarar el switch como input

  //Botones del estado automático 
  pinMode(boton1, INPUT);
  pinMode(boton2, INPUT);

  //Configurar LEDs como salida
  pinMode(led_azul_auto, OUTPUT);
  pinMode(led_amarillo_manual, OUTPUT);

  Serial.begin (9600); //Iniciar la comunicación serial
}

void loop() {
//Si el switch está conectado a ground, se lee 0 y está en modo manual
 palanca=digitalRead(cambio);
  Serial.println(palanca);
  if (palanca == 0) {
    Serial.print("Estamos en modo manual");
    ModoManual(); //LLamara a la función para modo manual

  //Si el switch está conectado a 5V, se lee 1 y cambia a modo automático
  } 
  else {
      if (contador > 5) {
      contador = 0; 
    } else if (contador < 0) {
      contador = 5; 
    }
    Serial.print("Estamos en modo automático");
    ModoAutomatico(); //LLamar a la función para modo automático 
        }
      }
//______________________________________________________________________________________________________________
 //Establecemos y definimos las funciones
 //Función para el movimiento de cada servo
void AnguloMotores (int m1, int m2, int m3, int m4) {
  motor1.write(m1); 
  motor2.write(m2);
  motor3.write(m3);
  motor4.write(m4);
  delay (15); 

  //Mostrar en el monitor serial los ángulos de cada motor
  Serial.print("Ángulo para el Servo 1: ");
  Serial.print(m1);
  Serial.print(" | Servo 2: ");
  Serial.print(m2);
  Serial.print(" | Servo 3: ");
  Serial.print(m3);
  Serial.print(" | Servo 4: ");
  Serial.println(m4);
  //En esta parte se van a mostrar los ángulos para cada motor ya sea en el modo manual o en el modo automático
}

//Función para el modo manual 
void ModoManual() {
    //Activar LED manual, apagar automático
    digitalWrite(led_amarillo_manual, HIGH);
    digitalWrite(led_azul_auto, LOW);

    //Leer el valor del primer potenciómetro para controlar el Servo1
    int l1 = map(analogRead(Pot1), 0, 1023, 0, 180); //Mapear los valores al rango de 0 a 180 grados
    int l2 = map(analogRead(Pot2), 0, 1023, 0, 180);
    int l3 = map(analogRead(Pot3), 0, 1023, 0, 180);
    int l4 = map(analogRead(Pot4), 0, 1023, 0, 180);
    
    //Leer el valor del potenciómetro con el motor y usamos la función del movimiento de los servos
    AnguloMotores(l1, l2, l3, l4);
    delay (50); //Con el delay no se lee suave 
}

//Función para el modo automático
void ModoAutomatico() {
  //Activar LED automático, apagar manual
  digitalWrite(led_azul_auto, HIGH);
  digitalWrite(led_amarillo_manual, LOW);
    
  //Si se presiona el botón de avanzar
    if (digitalRead(boton1) == HIGH) {
      //IMPLEMENTAR UN ANTIRREBOTE CON WHILE
        delay (50); 
        contador ++; //El contador aumenta en 1
        while (digitalRead(boton1) == HIGH) {
        }
      }
       
        //Se cambia entre posiciones según el valor del contador
        switch (contador) {
          case 0: 
          AnguloMotores (0, 0, 0, 5);
          delay(50);
          break; 

          case 1: 
          AnguloMotores (65, 50, 35, 90);
          delay (50);
          break; 

          case 2: 
          AnguloMotores (180, 180, 180, 0);
          delay (50);
          break; 

          case 3: 
          AnguloMotores (15, 75, 15, 35);
          delay (50);
          break; 

          case 4: 
          AnguloMotores (90, 180, 90, 180);
          delay (50);
          break; 

        
    //Si se presiona el botón para retroceder 
      } if (digitalRead(boton2) == HIGH) {
        delay (50);
        contador --; //El contador disminuye en 1
        while (digitalRead(boton2) == HIGH) { //Implementar un antirrebote con while
        }
        
        switch (contador) {
        case 0: 
          AnguloMotores (0, 0, 0, 25);
          delay(50);
          break; 

          case 1: 
          AnguloMotores (15, 50, 35, 45);
          delay (50);
          break; 

          case 2: 
          AnguloMotores (110, 180, 110, 75);
          delay (50);
          break; 

          case 3: 
          AnguloMotores (75, 75, 75, 100);
          delay (50);
          break; 

          case 4: 
          AnguloMotores (90, 90, 30, 0);
          delay (50);
          break; 
      }
      delay (50);
}}
